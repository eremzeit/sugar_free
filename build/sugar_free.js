// Generated by CoffeeScript 1.7.1
(function() {
  var ElementJudge, ElementMutator, InjunctionExecutor, PageJudge, animationCallback, e;

  if (window.sugar_free == null) {
    window.sugar_free = {};
  }

  window.sugar_free.sample_injunctions = [
    {
      page_matcher: {
        protocol: '*',
        host: 'www.youtube.com',
        path: '*'
      },
      action_list: [
        {
          type: 'hide',
          matchers: [
            {
              css: '.share-panel-embed'
            }, {
              css: '.share-panel-email'
            }, {
              css: '#watch-like'
            }, {
              css: '#watch-dislike'
            }, {
              css: '#watch-discussion'
            }, {
              css: '#share-services-container'
            }, {
              css: '#footer-links'
            }
          ]
        }
      ]
    }, {
      page_matcher: {
        protocol: '*',
        host: 'www.bbc.com',
        path: '*'
      },
      action_list: [
        {
          type: 'hide',
          matchers: [
            {
              css: '#whateverman'
            }
          ]
        }
      ]
    }, {
      page_matcher: {
        protocol: '*',
        host: 'www.facebook.com',
        path: '*'
      },
      action_list: [
        {
          type: 'hide',
          matchers: [
            {
              css: '#pagelet_rhc_footer'
            }, {
              css: '#groupsNav'
            }, {
              css: '#appsNav'
            }, {
              css: '#pagesNav'
            }, {
              css: '#listsNav'
            }, {
              css: '#interestsNav'
            }, {
              css: '#pagelet_trending_tags_and_topics'
            }, {
              css: '#pagelet_sidebar'
            }
          ]
        }
      ]
    }
  ];

  ElementJudge = (function() {
    function ElementJudge() {}

    ElementJudge.match = function(elementMatcher) {
      var fn, matched, type, value;
      if (_.isEmpty(elementMatcher)) {
        return $('*').not('*');
      }
      matched = $('*');
      for (type in elementMatcher) {
        value = elementMatcher[type];
        fn = this["_match_" + type];
        matched = fn(matched, value);
      }
      return matched;
    };

    ElementJudge._match_css = function($matched, str) {
      return $matched.filter(str);
    };

    ElementJudge._match_id = function($matched, id) {
      return $matched.filter('#' + id);
    };

    ElementJudge._match_class = function($matched, cls) {
      return $matched.filter('.' + cls);
    };

    return ElementJudge;

  })();

  ElementMutator = (function() {
    function ElementMutator() {}

    ElementMutator["do"] = function($elem, action_type, options) {
      return this.hideElement($elem);
    };

    ElementMutator.hideElement = function($elem) {
      return $elem.addClass('sugar-free-hide');
    };

    ElementMutator.hideElementByCSS = function(cssSelector) {
      var str;
      str = "" + cssSelector + " { display:none; }";
      return this._injectCSS(str);
    };

    ElementMutator._injectCSS = function(cssString) {
      var html;
      console.log('injecting...');
      html = "<style type='text/css'>" + cssString + "</style>";
      console.log(html);
      return $('head').append($(html));
    };

    return ElementMutator;

  })();

  console.log('LOADING PAGE JUDGE');

  PageJudge = (function() {
    function PageJudge() {}

    PageJudge.isPageMatch = function(pageMatcher) {
      return $.trim(pageMatcher.host) === $.trim(location.host);
    };

    return PageJudge;

  })();

  ElementMutator;

  console.log('LOADING SUGAR FREE');

  InjunctionExecutor = (function() {
    function InjunctionExecutor(injunctions) {
      this.injunctions = injunctions;
    }

    InjunctionExecutor.prototype.execute = function() {
      var action, injunction, matcher, _i, _len, _ref, _results;
      _ref = this.injunctions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        injunction = _ref[_i];
        if (!PageJudge.isPageMatch(injunction.page_matcher)) {
          console.log("Page is not a match: " + injunction.page_matcher);
          continue;
        }
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = injunction.action_list;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            action = _ref1[_j];
            _results1.push((function() {
              var _k, _len2, _ref2, _results2;
              _ref2 = action.matchers;
              _results2 = [];
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                matcher = _ref2[_k];
                if (matcher.css != null) {
                  _results2.push(ElementMutator.hideElementByCSS(matcher.css));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    };

    InjunctionExecutor.prototype.addInsertionListener = function(cssQuery) {};

    return InjunctionExecutor;

  })();

  animationCallback = function() {
    if (event.animationName === "nodeInserted") {
      return console.warn("Another node has been inserted! ", event, event.target);
    }
  };

  e = new InjunctionExecutor(window.sugar_free.sample_injunctions);

  e.execute();

}).call(this);
